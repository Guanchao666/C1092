//#include<stdio.h>
//#include<malloc.h>
//typedef struct student{
//	int number;
//	struct student *next;
//}*node,Node;
//
//node creat(int n);
//void fun(node l1, int baoshu);
//
//int main()
//{
//	int n,baoshu;
//	node head1;
//	while(scanf("%d%d",&n,&baoshu)!=EOF)
//	{
//		head1 = creat(n);
//		fun(head1,baoshu);
//	}
//	return 0;
//}
//
//node creat(int n)
//{
//	int i;
//	node h;
//	h = (node)malloc(sizeof(Node));
//	h->next=NULL;
//	node q=h;
//	node p;
//
//	for(i=1;i<=n;i++)
//	{
//		p=(node)malloc(sizeof(Node));
//		(*p).number = i;
//
//		p->next = q->next;
//		q->next = p;
//		q = p;
//	}
//	q->next = h->next;
//
//	return h;
//}
//
//void fun(node l1, int baoshu)
//{
//	int i;
//	node p = l1->next;
//	free(l1);
//	node q=NULL;
//	while(p->next != p)
//	{
//		for(i=1;i<=baoshu -2;i++)
//		p=p->next;
//		q = p->next;
//		p=p->next;
//		free(q);
//	}
//	printf("%d\n",p->number);
//	free(p);
//}
#include<stdio.h>
#include <malloc.h>

typedef struct student {
	int        number;
	struct student    * next;
}*node, Node;                           /* 结点 */

node creat( int n );                    /* 创建链表函数 */

void function( node l1, int baoshu );   /* 运行函数 */


int main() {
	int    n,baoshu;                      /* 人数 */
	node    head1;                           /* 链表的头结点 */
	while(scanf("%d%d",&n,&baoshu)!=EOF) {
		head1 = creat( n );                        /* 创建链表*/
		function( head1, baoshu );
	}
	return(0);
}


/*-------------------------------------------------------------*/

node creat( int n ) {
	int i;
	node h;                                         /* 头结点指针 */
	h    = (node) malloc( sizeof(Node) );        /* 创建头结点 */
	h->next = NULL;                                 /* next指针域赋空 */
	node    q = h;                                  /* 定义指针q，指向头结点 */
	node    p;

	for (  i = 1; i <= n; i++ ) {                /* 创建n个结点 */
		p        = (node) malloc( sizeof(Node) );
		(*p).number    = i;                    /* 输入编号 */

		p->next = q->next;                      /* 采用后差法插入节点 */
		q->next = p;
		q    = p;
	}
	q->next = h->next;                              /* 尾结点和首结点链接 */

	return(h);                                      /* 返回头结点 */
}


/*-------------------------------------------------------------*/
void function( node l1, int baoshu ) {            /* 移除实现 */
	int i;
	node p = l1->next;                        /* 指向首结点 */
	free( l1 );                               /* free头结点 */
	node q = NULL;                             /* 指向被移除结点，用于释放移除的人的结点 */
	while ( p->next != p ) {
		for (  i = 1; i <= baoshu - 2; i++ ) /* 移动到离开的人的结点的前一个，只需要移动baoshu-2次； */
			p = p->next;

		q    = p->next;              /* 记录删去的人的结点 */
		p->next = q->next;           /* 把q结点从链表移除 */

		p = p->next;                 /* 移动到下一个开始报数的人，很重要这一步 */
		free( q );             /*释放q结点*/
	}

	printf("%d\n",p->number);   /*输出结果带换行*/
	free( p );      /* 把最后一个结点free*/
}
